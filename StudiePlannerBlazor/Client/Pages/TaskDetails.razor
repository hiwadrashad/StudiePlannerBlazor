@*@page "/taskdetails"
@page "/taskdetails/{id}"

@using Microsoft.AspNetCore.Components;
@using StudiePlannerBlazor.Client.DataService;
@using StudiePlannerBlazor.Shared.Models;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;

<section class="employee-detail">
    <h1 class="page-title">
        Task details
    </h1>


    <div class="col-12 row">
        <div class="col-10 row">
            <div class="col-xs-12 col-sm-8">
                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Employee ID</label>
                    <div class="col-sm-8">
                        <label type="text" class="form-control-plaintext">@Employee.EmployeeId.ToString(leadingFormat)</label>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">First name</label>
                    <div class="col-sm-8">
                        <label type="text" readonly class="form-control-plaintext">@Employee.FirstName</label>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Last name</label>
                    <div class="col-sm-8">
                        <label type="text" readonly class="form-control-plaintext">@Employee.LastName</label>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Birthdate</label>
                    <div class="col-sm-8">
                        <label type="text" readonly class="form-control-plaintext">@Employee.BirthDate.ToShortDateString()</label>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Email</label>
                    <div class="col-sm-8">
                        <label type="text" readonly class="form-control-plaintext">@Employee.Email</label>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Street</label>
                    <div class="col-sm-8">
                        <label type="text" readonly class="form-control-plaintext">@Employee.Street</label>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Zip</label>
                    <div class="col-sm-8">
                        <label type="text" readonly class="form-control-plaintext">@Employee.Zip</label>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">City</label>
                    <div class="col-sm-8">
                        <label type="text" readonly class="form-control-plaintext">@Employee.City</label>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Phone number</label>
                    <div class="col-sm-8">
                        <label type="text" readonly class="form-control-plaintext">@Employee.PhoneNumber</label>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Gender</label>
                    <div class="col-sm-8">
                        <label type="text" readonly class="form-control-plaintext">@Employee.Gender</label>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Smoker</label>
                    <div class="col-sm-8">

                        @if (Employee.Smoker)
                        {
                            <label type="text" readonly class="form-control-plaintext">Yes</label>
                        }
                        else
                        {
                            <label type="text" readonly class="form-control-plaintext">No</label>

                        }
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Job category</label>
                    <div class="col-sm-8">
                        <label type="text" readonly class="form-control-plaintext">@JobCategory</label>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Joined us</label>
                    <div class="col-sm-8">
                        <label type="text" readonly class="form-control-plaintext">@Employee.JoinedDate?.ToShortDateString()</label>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Left us</label>
                    <div class="col-sm-8">
                        <label type="text" readonly class="form-control-plaintext">@Employee.ExitDate?.ToShortDateString()</label>
                    </div>
                </div>
            </div>
        </div>
    </div>


</section>
@code {
    [Inject]
    public IDataService<TaskModel> TaskDataService { get; set; }
    [Inject]
    public IDataService<AppointmentModel> AppointmentDataService { get; set; }
    [Inject]
    public IDataService<CalenderModel> CalenderDataService { get; set; }
    [Inject]
    public NavigationManager NavManager { get; set; }
    public TaskModel model { get; set; } = new TaskModel { Appointment = new AppointmentModel { } };

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        model = await TaskDataService.GetById(id);

        //<summary> apply list of logged in identity instead of all stored tasks / get identity running first
        //var allacounts = await CalenderDataService.GetAll();
        //var currentaccount = allacounts.Where(a => a.User.Email == StaticResources.CurrentIdentityUser.identityUser.Email).FirstOrDefault();
        //model = currentaccount.Tasks.Where(a => a.Id == id).FirstOrDefault();
        //<summary>
    }
    public async void GoBack()
    {
        await TaskDataService.Delete(model.Id);

        //<summary> apply list of logged in identity instead of all stored tasks / get identity running first
        //var allaccounts = await CalenderDataService.GetAll();
        //var currentaccount = allaccounts.Where(a => a.User.Email == StaticResources.CurrentIdentityUser.identityUser.Email).FirstOrDefault();
        //currentaccount.Tasks.Remove(model);
        //await CalenderDataService.Update(currentaccount);
        //<summary>

        NavManager.NavigateTo("/succesfullydeletedtask");
    }
}*@
