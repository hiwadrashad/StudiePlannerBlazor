@page "/taskdetails"
@page "/taskdetails/{id}"

@using Microsoft.AspNetCore.Components;
@using StudiePlannerBlazor.Client.DataService;
@using StudiePlannerBlazor.Shared.Models;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
<link href="/css/Background.css" rel="stylesheet" />

@if (model == null)
{
    <p><em>Loading...</em></p>
}
else
{
<section class="employee-detail">
    <h1 class="page-title">
        Task details
    </h1>
    <EditForm Model="model">
        <div class="col-12 row">
            <div class="col-10 row">
                <div class="col-xs-12 col-sm-8">
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Name</label>
                        <div class="col-sm-8">
                            <label type="text" class="form-control-plaintext">@model.Name</label>
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Start Date</label>
                        <div class="col-sm-8">
                            <label type="text" readonly class="form-control-plaintext">@model.StartDate</label>
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">End date</label>
                        <div class="col-sm-8">
                            <label type="text" readonly class="form-control-plaintext">@model.EndDate</label>
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Status</label>
                        <div class="col-sm-8">
                            <label type="text" readonly class="form-control-plaintext">@model.Status</label>
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Notes</label>
                        <div class="col-sm-8">
                            <label type="text" readonly class="form-control-plaintext">@model.Notes</label>
                        </div>
                    </div>
                    @if (model.Appointment != null)
                    {
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Telephone number</label>
                            <div class="col-sm-8">
                                <label type="text" readonly class="form-control-plaintext">@model.Appointment.TelephoneNumber</label>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Email</label>
                            <div class="col-sm-8">
                                <label type="text" readonly class="form-control-plaintext">@model.Appointment.Email</label>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Personal contact</label>
                            <div class="col-sm-8">
                                <label type="text" readonly class="form-control-plaintext">@model.Appointment.PersonalContact</label>
                            </div>
                        </div>
                    }
                    @if (model.Documents.Count > 0)
                    {
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Documents</label>
                        <div class="col-sm-8">
                            @for (int i = 0; i < model.Documents.Count; i++)
                            {
                            var _doc = model.Documents[i];
                            <label type="text" class="form-control-plaintext"><a href="@_doc.Path" target="_blank">Document @(i + 1)</a></label>
                            }
                        </div>
                    </div>
                    }
                </div>
            </div>
        </div>
    </EditForm>


</section>
}
@code {
    [Inject]
    public IDataService<TaskModel> TaskDataService { get; set; }
    [Inject]
    public IDataService<AppointmentModel> AppointmentDataService { get; set; }
    [Inject]
    public NavigationManager NavManager { get; set; }
    public TaskModel model { get; set; } = new TaskModel { Appointment = new AppointmentModel { } };

    [Parameter]
    public string id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        model = await TaskDataService.GetById(Int32.Parse(id));

        //<summary> apply list of logged in identity instead of all stored tasks / get identity running first
        //var allacounts = await CalenderDataService.GetAll();
        //var currentaccount = allacounts.Where(a => a.User.Email == StaticResources.CurrentIdentityUser.identityUser.Email).FirstOrDefault();
        //model = currentaccount.Tasks.Where(a => a.Id == id).FirstOrDefault();
        //<summary>
    }
}
