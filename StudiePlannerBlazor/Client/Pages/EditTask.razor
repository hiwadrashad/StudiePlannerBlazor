@page "/edittask"
@page "/edittask/{id}"
@attribute [Authorize]

@using Microsoft.AspNetCore.Components;
@using StudiePlannerBlazor.Client.DataService;
@using StudiePlannerBlazor.Shared.Models;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
<link href="/css/Background.css" rel="stylesheet" />
@if (model == null)
{
    <p><em>Loading...</em></p>
}
else
{
<section class="add">
    <h1 class="page-title">Edit task</h1>
    <EditForm Model="model" OnInvalidSubmit="RedirectError" OnValidSubmit="EditingTask">
        <div class="form-group row">
            <label class="col-sm-3">Name </label>
            <InputText id="lastName" class="form-control col-sm-8" @bind-Value="@model.Name"></InputText>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => model.Name)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3">Start date </label>
            <InputDate class="form-control col-sm-8" @bind-Value="@model.StartDate"></InputDate>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => model.StartDate)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3">Start time </label>
            <input type="time" class="form-control col-sm-8" id="StartTime" @bind="model.StartDate" />
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => model.StartDate)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3"> End date</label>
            <InputDate class="form-control col-sm-8" @bind-Value="@model.EndDate"></InputDate>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => model.EndDate)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3">End time </label>
            <input type="time" class="form-control col-sm-8" id="StartTime" @bind="model.EndDate" />
            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => model.EndDate)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3"> Status</label>
            <InputSelect class="form-control" @bind-Value="@model.Status">
                @foreach (var item in Enum.GetValues(typeof(StudiePlannerBlazor.Shared.Models.TaskStatus)))
                    {
                    <option value="@item">@item</option>
                    }
            </InputSelect>
            <ValidationMessage For="@(() => model.Status)" />
        </div>
        <div class="form-group row">
            <label class="col-sm-3"> Notes</label>
            <InputText class="form-control" @bind-Value="@model.Notes"></InputText>
            <ValidationMessage For="@(() => model.Notes)" />
        </div>
        @if (model.Appointment != null)
        {
            <div class="form-group row">
                <label class="col-sm-3"> Telephone number</label>
                <InputText class="form-control" @bind-Value="@model.Appointment.TelephoneNumber"></InputText>
                <ValidationMessage For="@(() => model.Appointment.TelephoneNumber)" />
            </div>
            <div class="form-group row">
                <label class="col-sm-3"> Email</label>
                <InputText class="form-control" @bind-Value="@model.Appointment.Email"></InputText>
                <ValidationMessage For="@(() => model.Appointment.Email)" />
            </div>
            <div class="form-group row">
                <label class="col-sm-3"> Personal contact</label>
                <InputCheckbox class="form-control" @bind-Value="@model.Appointment.PersonalContact"></InputCheckbox>
                <ValidationMessage For="@(() => model.Appointment.PersonalContact)" />
            </div>
            <div class="form-group">
                <label>Documents </label>
                <input type="file" />
            </div>
        }
        <div class="form-group row">
            <label class="col-sm-3"> Documents</label>
            <StudiePlannerBlazor.Client.Components.UploadComponent Documents="model.Documents" OnChange="AssignDocuments" />
        </div>

        <button type="submit" class="btn btn-primary">Edit task</button>
    </EditForm>
</section>
}
@code {
    [Inject]
    public IDataService<TaskModel> TaskDataService { get; set; }
    [Inject]
    public IDataService<AppointmentModel> AppointmentDataService { get; set; }
    [Inject]
    public NavigationManager NavManager { get; set; }
    public TaskModel model { get; set; } = new TaskModel { Appointment = new AppointmentModel { } };

    [Parameter]
    public string id { get; set; }

    private void AssignDocuments(List<DocumentModel> documents) => model.Documents.AddRange(documents);

    protected override async Task OnInitializedAsync()
    {
        model = await TaskDataService.GetById(Int32.Parse(id));

        //<summary> apply list of logged in identity instead of all stored tasks / get identity running first
        //var allacounts = await CalenderDataService.GetAll();
        //var currentaccount = allacounts.Where(a => a.User.Email == StaticResources.CurrentIdentityUser.identityUser.Email).FirstOrDefault();
        //model = currentaccount.Tasks.Where(a => a.Id == id).FirstOrDefault();
        //<summary>
    }

    public async void EditingTask()
    {
        await TaskDataService.Update(model);

        //<summary> apply list of logged in identity instead of all stored tasks / get identity running first
        //var allaccounts = await CalenderDataService.GetAll();
        //var currentaccount = allaccounts.Where(a => a.User.Email == StaticResources.CurrentIdentityUser.identityUser.Email).FirstOrDefault();
        //var currenttask = currentaccount.Tasks.Where(a => a.Id == id).FirstOrDefault();
        //currenttask = model;
        //await CalenderDataService.Update(currentaccount);
        //<summary>

        NavManager.NavigateTo("/succesfullyeditedtask");
    }

    public void RedirectError()
    {
        NavManager.NavigateTo("/failededitedtask");
    }
}
