<input type="file" @ref="_input" @onchange="HandleSelected" />
<br />
@if(Documents.Count > 0)
{
    @for(int i = 0; i < Documents.Count; i++)
    {
        <div><a href="@Documents[i].Path" target="_blank">Document @(i + 1)</a> - <a style="color: blue; text-decoration: underline; cursor: pointer;" @onclick="() => HandleDelete(Documents[i])">Delete?</a></div>
    }
}

@code {
    private ElementReference _input;

    [Parameter]
    public List<DocumentModel> Documents { get; set; } = new List<DocumentModel>();
    [Parameter]
    public EventCallback<List<DocumentModel>> OnChange { get; set; }
    [Inject]
    public IFileReaderService FileReaderService { get; set; }
    [Inject]
    public IUploadDataService Repository { get; set; }

    private async Task HandleSelected()
    {
        foreach (var file in await FileReaderService.CreateReference(_input).EnumerateFilesAsync())
        {
            if (file != null)
            {
                var fileInfo = await file.ReadFileInfoAsync();
                using (var ms = await file.CreateMemoryStreamAsync(4 * 1024))
                {
                    var content = new MultipartFormDataContent();
                    content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                    content.Add(new StreamContent(ms, Convert.ToInt32(ms.Length)), "file", fileInfo.Name);
                    var document = await Repository.UploadFile(content);
                    Documents.Add(document);
                }
            }
        }

        await OnChange.InvokeAsync(Documents);
    }

    private async Task HandleDelete(DocumentModel model)
    {
        DocumentModel document = (await Repository.GetAllFiles()).Where((doc) => doc.Path == model.Path).FirstOrDefault();
        await Repository.DeleteFile(document.Id);
        Documents.Remove(model);

        await OnChange.InvokeAsync(Documents);
    }
}