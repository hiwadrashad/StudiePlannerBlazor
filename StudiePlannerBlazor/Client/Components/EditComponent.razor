@using Microsoft.AspNetCore.Components;
@using StudiePlannerBlazor.Client.DataService;
@using StudiePlannerBlazor.Shared.Models;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@if (ShowDialog)
{
<div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="titleLabel">Edit task</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <EditForm Model="@CurrentTask" OnValidSubmit="@EditTask">

                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label>Name </label>
                        <InputText class="form-control" @bind-Value="@CurrentTask.Name"></InputText>
                        <ValidationMessage For="@(() => CurrentTask.Name)" />
                    </div>

                    <div class="form-group">
                        <label>Start date </label>
                        <InputDate class="form-control" @bind-Value="@CurrentTask.StartDate"></InputDate>
                        <ValidationMessage For="@(() => CurrentTask.StartDate)" />
                    </div>

                    <div class="form-group">
                        <label>End date </label>
                        <InputDate class="form-control" @bind-Value="@CurrentTask.EndDate"></InputDate>
                        <ValidationMessage For="@(() => CurrentTask.EndDate)" />
                    </div>

                    <div class="form-group">
                        <label>Status </label>
                        <InputSelect class="form-control" @bind-Value="@CurrentTask.Status">
                            @foreach (var item in Enum.GetValues(typeof(StudiePlannerBlazor.Shared.Models.TaskStatus)))
                                {
                                <option value="@item">@item</option>
                                }
                        </InputSelect>
                        <ValidationMessage For="@(() => CurrentTask.Status)" />
                    </div>

                    <div class="form-group">
                        <label>Notes </label>
                        <InputText class="form-control" @bind-Value="@CurrentTask.Notes"></InputText>
                        <ValidationMessage For="@(() => CurrentTask.Notes)" />
                    </div>

                    <div class="form-group">
                        <label>Telephone number </label>
                        <InputText class="form-control" @bind-Value="@CurrentTask.Appointment.TelephoneNumber"></InputText>
                        <ValidationMessage For="@(() => CurrentTask.Appointment.TelephoneNumber)" />
                    </div>
                    <div class="form-group">
                        <label>Email </label>
                        <InputText class="form-control" @bind-Value="@CurrentTask.Appointment.Email"></InputText>
                        <ValidationMessage For="@(() => CurrentTask.Appointment.Email)" />
                    </div>
                    <div class="form-group">
                        <label>Email </label>
                        <InputCheckbox class="form-control" @bind-Value="@CurrentTask.Appointment.PersonalContact"></InputCheckbox>
                        <ValidationMessage For="@(() => CurrentTask.Appointment.PersonalContact)" />
                    </div>
                    <div class="form-group">
                        <label>Documents </label>
                        <input type="file" />
                    </div>

                    <button type="submit" class="btn btn-primary">Opslaan</button>
                    <a class="btn btn-outline-primary" @onclick="@Close">Sluiten</a>
                </EditForm>

            </div>
        </div>
    </div>
</div>
}
@code {
    public bool ShowDialog { get; set; }
    [Parameter]
    public int TaskId { get; set; }

    public TaskModel CurrentTask { get; set; }

    [Inject]
    public IDataService<AppointmentModel> _AppointmentDataService { get; set; }
    [Inject]
    public IDataService<CalenderModel> _CalenderDataService { get; set; }
    [Inject]
    public IDataService<TaskModel> _TaskDataService { get; set; }
    [Inject]
    public NavigationManager navmanger { get; set; }

    public async void EditTask()
    {
        await _TaskDataService.Update(CurrentTask);
        Close();
    }

    public void Show()
    {
        ShowDialog = true;
        StateHasChanged();
    }
    public void Close()
    {
        ShowDialog = false;
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        CurrentTask = await _TaskDataService.GetById(TaskId);
    }
}